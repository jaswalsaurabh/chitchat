{"version":3,"file":"609.js","mappings":"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","sources":["webpack:///../../@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/checkUrl.js","webpack:///../../@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/requestHelpers.js","webpack:///../../@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/retry-wrapper.js","webpack:///../../@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/fromHttp.js"],"sourcesContent":["import { CredentialsProviderError } from \"@smithy/property-provider\";\nconst LOOPBACK_CIDR_IPv4 = \"127.0.0.0/8\";\nconst LOOPBACK_CIDR_IPv6 = \"::1/128\";\nconst ECS_CONTAINER_HOST = \"169.254.170.2\";\nconst EKS_CONTAINER_HOST_IPv4 = \"169.254.170.23\";\nconst EKS_CONTAINER_HOST_IPv6 = \"[fd00:ec2::23]\";\nexport const checkUrl = (url) => {\n    if (url.protocol === \"https:\") {\n        return;\n    }\n    if (url.hostname === ECS_CONTAINER_HOST ||\n        url.hostname === EKS_CONTAINER_HOST_IPv4 ||\n        url.hostname === EKS_CONTAINER_HOST_IPv6) {\n        return;\n    }\n    if (url.hostname.includes(\"[\")) {\n        if (url.hostname === \"[::1]\" || url.hostname === \"[0000:0000:0000:0000:0000:0000:0000:0001]\") {\n            return;\n        }\n    }\n    else {\n        if (url.hostname === \"localhost\") {\n            return;\n        }\n        const ipComponents = url.hostname.split(\".\");\n        const inRange = (component) => {\n            const num = parseInt(component, 10);\n            return 0 <= num && num <= 255;\n        };\n        if (ipComponents[0] === \"127\" &&\n            inRange(ipComponents[1]) &&\n            inRange(ipComponents[2]) &&\n            inRange(ipComponents[3]) &&\n            ipComponents.length === 4) {\n            return;\n        }\n    }\n    throw new CredentialsProviderError(`URL not accepted. It must either be HTTPS or match one of the following:\n  - loopback CIDR 127.0.0.0/8 or [::1/128]\n  - ECS container host 169.254.170.2\n  - EKS container host 169.254.170.23 or [fd00:ec2::23]`);\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { HttpRequest } from \"@smithy/protocol-http\";\nimport { parseRfc3339DateTime } from \"@smithy/smithy-client\";\nimport { sdkStreamMixin } from \"@smithy/util-stream\";\nexport function createGetRequest(url) {\n    return new HttpRequest({\n        protocol: url.protocol,\n        hostname: url.hostname,\n        port: Number(url.port),\n        path: url.pathname,\n        query: Array.from(url.searchParams.entries()).reduce((acc, [k, v]) => {\n            acc[k] = v;\n            return acc;\n        }, {}),\n        fragment: url.hash,\n    });\n}\nexport async function getCredentials(response) {\n    const contentType = response?.headers[\"content-type\"] ?? response?.headers[\"Content-Type\"] ?? \"\";\n    if (!contentType.includes(\"json\")) {\n        console.warn(\"HTTP credential provider response header content-type was not application/json. Observed: \" + contentType + \".\");\n    }\n    const stream = sdkStreamMixin(response.body);\n    const str = await stream.transformToString();\n    if (response.statusCode === 200) {\n        const parsed = JSON.parse(str);\n        if (typeof parsed.AccessKeyId !== \"string\" ||\n            typeof parsed.SecretAccessKey !== \"string\" ||\n            typeof parsed.Token !== \"string\" ||\n            typeof parsed.Expiration !== \"string\") {\n            throw new CredentialsProviderError(\"HTTP credential provider response not of the required format, an object matching: \" +\n                \"{ AccessKeyId: string, SecretAccessKey: string, Token: string, Expiration: string(rfc3339) }\");\n        }\n        return {\n            accessKeyId: parsed.AccessKeyId,\n            secretAccessKey: parsed.SecretAccessKey,\n            sessionToken: parsed.Token,\n            expiration: parseRfc3339DateTime(parsed.Expiration),\n        };\n    }\n    if (response.statusCode >= 400 && response.statusCode < 500) {\n        let parsedBody = {};\n        try {\n            parsedBody = JSON.parse(str);\n        }\n        catch (e) { }\n        throw Object.assign(new CredentialsProviderError(`Server responded with status: ${response.statusCode}`), {\n            Code: parsedBody.Code,\n            Message: parsedBody.Message,\n        });\n    }\n    throw new CredentialsProviderError(`Server responded with status: ${response.statusCode}`);\n}\n","export const retryWrapper = (toRetry, maxRetries, delayMs) => {\n    return async () => {\n        for (let i = 0; i < maxRetries; ++i) {\n            try {\n                return await toRetry();\n            }\n            catch (e) {\n                await new Promise((resolve) => setTimeout(resolve, delayMs));\n            }\n        }\n        return await toRetry();\n    };\n};\n","import { NodeHttpHandler } from \"@smithy/node-http-handler\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport fs from \"fs/promises\";\nimport { checkUrl } from \"./checkUrl\";\nimport { createGetRequest, getCredentials } from \"./requestHelpers\";\nimport { retryWrapper } from \"./retry-wrapper\";\nconst AWS_CONTAINER_CREDENTIALS_RELATIVE_URI = \"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\";\nconst DEFAULT_LINK_LOCAL_HOST = \"http://169.254.170.2\";\nconst AWS_CONTAINER_CREDENTIALS_FULL_URI = \"AWS_CONTAINER_CREDENTIALS_FULL_URI\";\nconst AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE = \"AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE\";\nconst AWS_CONTAINER_AUTHORIZATION_TOKEN = \"AWS_CONTAINER_AUTHORIZATION_TOKEN\";\nexport const fromHttp = (options) => {\n    options.logger?.debug(\"@aws-sdk/credential-provider-http\", \"fromHttp\");\n    let host;\n    const relative = options.awsContainerCredentialsRelativeUri ?? process.env[AWS_CONTAINER_CREDENTIALS_RELATIVE_URI];\n    const full = options.awsContainerCredentialsFullUri ?? process.env[AWS_CONTAINER_CREDENTIALS_FULL_URI];\n    const token = options.awsContainerAuthorizationToken ?? process.env[AWS_CONTAINER_AUTHORIZATION_TOKEN];\n    const tokenFile = options.awsContainerAuthorizationTokenFile ?? process.env[AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE];\n    if (relative && full) {\n        console.warn(\"AWS SDK HTTP credentials provider:\", \"you have set both awsContainerCredentialsRelativeUri and awsContainerCredentialsFullUri.\");\n        console.warn(\"awsContainerCredentialsFullUri will take precedence.\");\n    }\n    if (token && tokenFile) {\n        console.warn(\"AWS SDK HTTP credentials provider:\", \"you have set both awsContainerAuthorizationToken and awsContainerAuthorizationTokenFile.\");\n        console.warn(\"awsContainerAuthorizationToken will take precedence.\");\n    }\n    if (full) {\n        host = full;\n    }\n    else if (relative) {\n        host = `${DEFAULT_LINK_LOCAL_HOST}${relative}`;\n    }\n    else {\n        throw new CredentialsProviderError(`No HTTP credential provider host provided.\nSet AWS_CONTAINER_CREDENTIALS_FULL_URI or AWS_CONTAINER_CREDENTIALS_RELATIVE_URI.`);\n    }\n    const url = new URL(host);\n    checkUrl(url);\n    const requestHandler = new NodeHttpHandler({\n        requestTimeout: options.timeout ?? 1000,\n        connectionTimeout: options.timeout ?? 1000,\n    });\n    return retryWrapper(async () => {\n        const request = createGetRequest(url);\n        if (token) {\n            request.headers.Authorization = token;\n        }\n        else if (tokenFile) {\n            request.headers.Authorization = (await fs.readFile(tokenFile)).toString();\n        }\n        try {\n            const result = await requestHandler.handle(request);\n            return getCredentials(result.response);\n        }\n        catch (e) {\n            throw new CredentialsProviderError(String(e));\n        }\n    }, options.maxRetries ?? 3, options.timeout ?? 1000);\n};\n"],"names":["LOOPBACK_CIDR_IPv4","LOOPBACK_CIDR_IPv6","ECS_CONTAINER_HOST","EKS_CONTAINER_HOST_IPv4","EKS_CONTAINER_HOST_IPv6","checkUrl","url","ipComponents","inRange","component","num","createGetRequest","acc","k","v","getCredentials","response","contentType","str","parsed","parsedBody","retryWrapper","toRetry","maxRetries","delayMs","i","resolve","AWS_CONTAINER_CREDENTIALS_RELATIVE_URI","DEFAULT_LINK_LOCAL_HOST","AWS_CONTAINER_CREDENTIALS_FULL_URI","AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE","AWS_CONTAINER_AUTHORIZATION_TOKEN","fromHttp","options","host","relative","full","token","tokenFile","requestHandler","request","result","e"],"sourceRoot":""}