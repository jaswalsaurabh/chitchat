"use strict";exports.id=51,exports.ids=[51],exports.modules={8051:(Ie,O,l)=>{l.r(O),l.d(O,{DEFAULT_MAX_RETRIES:()=>R,DEFAULT_TIMEOUT:()=>y,ENV_CMDS_AUTH_TOKEN:()=>C,ENV_CMDS_FULL_URI:()=>T,ENV_CMDS_RELATIVE_URI:()=>A,fromContainerMetadata:()=>W,fromInstanceMetadata:()=>re,getInstanceMetadataEndpoint:()=>P,httpRequest:()=>p,providerConfigFromInit:()=>h});var s=l(6034),x=l(7016),U=l(181),k=l(8611);function p(e){return new Promise((t,n)=>{const o=(0,k.request)({method:"GET",...e,hostname:e.hostname?.replace(/^\[(.+)\]$/,"$1")});o.on("error",a=>{n(Object.assign(new s.mZ("Unable to connect to instance metadata service"),a)),o.destroy()}),o.on("timeout",()=>{n(new s.mZ("TimeoutError from instance metadata service")),o.destroy()}),o.on("response",a=>{const{statusCode:r=400}=a;(r<200||300<=r)&&(n(Object.assign(new s.mZ("Error response received from instance metadata service"),{statusCode:r})),o.destroy());const I=[];a.on("data",i=>{I.push(i)}),a.on("end",()=>{t(U.Buffer.concat(I)),o.destroy()})}),o.end()})}const w=e=>Boolean(e)&&typeof e=="object"&&typeof e.AccessKeyId=="string"&&typeof e.SecretAccessKey=="string"&&typeof e.Token=="string"&&typeof e.Expiration=="string",M=e=>({accessKeyId:e.AccessKeyId,secretAccessKey:e.SecretAccessKey,sessionToken:e.Token,expiration:new Date(e.Expiration)}),y=1e3,R=0,h=({maxRetries:e=R,timeout:t=y})=>({maxRetries:e,timeout:t}),v=(e,t)=>{let n=e();for(let o=0;o<t;o++)n=n.catch(e);return n},T="AWS_CONTAINER_CREDENTIALS_FULL_URI",A="AWS_CONTAINER_CREDENTIALS_RELATIVE_URI",C="AWS_CONTAINER_AUTHORIZATION_TOKEN",W=(e={})=>{const{timeout:t,maxRetries:n}=h(e);return()=>v(async()=>{const o=await H(),a=JSON.parse(await K(t,o));if(!w(a))throw new s.C1("Invalid response received from instance metadata service.");return M(a)},n)},K=async(e,t)=>(process.env[C]&&(t.headers={...t.headers,Authorization:process.env[C]}),(await p({...t,timeout:e})).toString()),$="169.254.170.2",B={localhost:!0,"127.0.0.1":!0},G={"http:":!0,"https:":!0},H=async()=>{if(process.env[A])return{hostname:$,path:process.env[A]};if(process.env[T]){const e=(0,x.parse)(process.env[T]);if(!e.hostname||!(e.hostname in B))throw new s.C1(`${e.hostname} is not a valid container metadata service hostname`,!1);if(!e.protocol||!(e.protocol in G))throw new s.C1(`${e.protocol} is not a valid container metadata service protocol`,!1);return{...e,port:e.port?parseInt(e.port,10):void 0}}throw new s.C1(`The container metadata credential provider cannot be used unless the ${A} or ${T} environment variable is set`,!1)};var N=l(8967);class D extends s.C1{constructor(t,n=!0){super(t,n),this.tryNextLink=n,this.name="InstanceMetadataV1FallbackError",Object.setPrototypeOf(this,D.prototype)}}var Z=l(5999),S;(function(e){e.IPv4="http://169.254.169.254",e.IPv6="http://[fd00:ec2::254]"})(S||(S={}));const j="AWS_EC2_METADATA_SERVICE_ENDPOINT",z="ec2_metadata_service_endpoint",J={environmentVariableSelector:e=>e[j],configFileSelector:e=>e[z],default:void 0};var E;(function(e){e.IPv4="IPv4",e.IPv6="IPv6"})(E||(E={}));const X="AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE",Y="ec2_metadata_service_endpoint_mode",q={environmentVariableSelector:e=>e[X],configFileSelector:e=>e[Y],default:E.IPv4},P=async()=>(0,Z.D)(await Q()||await ee()),Q=async()=>(0,N.Z)(J)(),ee=async()=>{const e=await(0,N.Z)(q)();switch(e){case E.IPv4:return S.IPv4;case E.IPv6:return S.IPv6;default:throw new Error(`Unsupported endpoint mode: ${e}. Select from ${Object.values(E)}`)}},te=5*60,ne=5*60,ae="https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html",b=(e,t)=>{const n=te+Math.floor(Math.random()*ne),o=new Date(Date.now()+n*1e3);t.warn("Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.\nFor more information, please visit: "+ae);const a=e.originalExpiration??e.expiration;return{...e,...a?{originalExpiration:a}:{},expiration:o}},oe=(e,t={})=>{const n=t?.logger||console;let o;return async()=>{let a;try{a=await e(),a.expiration&&a.expiration.getTime()<Date.now()&&(a=b(a,n))}catch(r){if(o)n.warn("Credential renew failed: ",r),a=b(o,n);else throw r}return o=a,a}},F="/latest/meta-data/iam/security-credentials/",se="/latest/api/token",g="AWS_EC2_METADATA_V1_DISABLED",V="ec2_metadata_v1_disabled",L="x-aws-ec2-metadata-token",re=(e={})=>oe(ie(e),{logger:e.logger}),ie=e=>{let t=!1;const{logger:n,profile:o}=e,{timeout:a,maxRetries:r}=h(e),I=async(i,u)=>{if(t||u.headers?.[L]==null){let c=!1,d=!1;const Ee=await(0,N.Z)({environmentVariableSelector:f=>{const m=f[g];if(d=!!m&&m!=="false",m===void 0)throw new s.C1(`${g} not set in env, checking config file next.`);return d},configFileSelector:f=>{const m=f[V];return c=!!m&&m!=="false",c},default:!1},{profile:o})();if(e.ec2MetadataV1Disabled||Ee){const f=[];throw e.ec2MetadataV1Disabled&&f.push("credential provider initialization (runtime option ec2MetadataV1Disabled)"),c&&f.push(`config file profile (${V})`),d&&f.push(`process environment variable (${g})`),new D(`AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${f.join(", ")}].`)}}const fe=(await v(async()=>{let c;try{c=await de(u)}catch(d){throw d.statusCode===401&&(t=!1),d}return c},i)).trim();return v(async()=>{let c;try{c=await le(fe,u)}catch(d){throw d.statusCode===401&&(t=!1),d}return c},i)};return async()=>{const i=await P();if(t)return n?.debug("AWS SDK Instance Metadata","using v1 fallback (no token fetch)"),I(r,{...i,timeout:a});{let u;try{u=(await ce({...i,timeout:a})).toString()}catch(_){if(_?.statusCode===400)throw Object.assign(_,{message:"EC2 Metadata token request returned error"});return(_.message==="TimeoutError"||[403,404,405].includes(_.statusCode))&&(t=!0),n?.debug("AWS SDK Instance Metadata","using v1 fallback (initial)"),I(r,{...i,timeout:a})}return I(r,{...i,headers:{[L]:u},timeout:a})}}},ce=async e=>p({...e,path:se,method:"PUT",headers:{"x-aws-ec2-metadata-token-ttl-seconds":"21600"}}),de=async e=>(await p({...e,path:F})).toString(),le=async(e,t)=>{const n=JSON.parse((await p({...t,path:F+e})).toString());if(!w(n))throw new s.C1("Invalid response received from instance metadata service.");return M(n)}}};

//# sourceMappingURL=51.js.map