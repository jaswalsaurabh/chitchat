{"version":3,"file":"41.js","mappings":"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","sources":["webpack:///../../@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveCredentialSource.js","webpack:///../../@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveAssumeRoleCredentials.js","webpack:///../../@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProcessCredentials.js","webpack:///../../@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveSsoCredentials.js","webpack:///../../@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveStaticCredentials.js","webpack:///../../@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveWebIdentityCredentials.js","webpack:///../../@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProfileData.js","webpack:///../../@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/credential-provider-ini/dist-es/fromIni.js"],"sourcesContent":["import { CredentialsProviderError } from \"@smithy/property-provider\";\nexport const resolveCredentialSource = (credentialSource, profileName) => {\n    const sourceProvidersMap = {\n        EcsContainer: (options) => import(\"@smithy/credential-provider-imds\").then(({ fromContainerMetadata }) => fromContainerMetadata(options)),\n        Ec2InstanceMetadata: (options) => import(\"@smithy/credential-provider-imds\").then(({ fromInstanceMetadata }) => fromInstanceMetadata(options)),\n        Environment: (options) => import(\"@aws-sdk/credential-provider-env\").then(({ fromEnv }) => fromEnv(options)),\n    };\n    if (credentialSource in sourceProvidersMap) {\n        return sourceProvidersMap[credentialSource];\n    }\n    else {\n        throw new CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, ` +\n            `expected EcsContainer or Ec2InstanceMetadata or Environment.`);\n    }\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { getProfileName } from \"@smithy/shared-ini-file-loader\";\nimport { resolveCredentialSource } from \"./resolveCredentialSource\";\nimport { resolveProfileData } from \"./resolveProfileData\";\nexport const isAssumeRoleProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.role_arn === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1 &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.external_id) > -1 &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.mfa_serial) > -1 &&\n    (isAssumeRoleWithSourceProfile(arg) || isAssumeRoleWithProviderProfile(arg));\nconst isAssumeRoleWithSourceProfile = (arg) => typeof arg.source_profile === \"string\" && typeof arg.credential_source === \"undefined\";\nconst isAssumeRoleWithProviderProfile = (arg) => typeof arg.credential_source === \"string\" && typeof arg.source_profile === \"undefined\";\nexport const resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {\n    options.logger?.debug(\"@aws-sdk/credential-provider-ini\", \"resolveAssumeRoleCredentials (STS)\");\n    const data = profiles[profileName];\n    if (!options.roleAssumer) {\n        const { getDefaultRoleAssumer } = await import(\"./loadSts\");\n        options.roleAssumer = getDefaultRoleAssumer({\n            ...options.clientConfig,\n            credentialProviderLogger: options.logger,\n            parentClientConfig: options?.parentClientConfig,\n        }, options.clientPlugins);\n    }\n    const { source_profile } = data;\n    if (source_profile && source_profile in visitedProfiles) {\n        throw new CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile` +\n            ` ${getProfileName(options)}. Profiles visited: ` +\n            Object.keys(visitedProfiles).join(\", \"), false);\n    }\n    const sourceCredsProvider = source_profile\n        ? resolveProfileData(source_profile, profiles, options, {\n            ...visitedProfiles,\n            [source_profile]: true,\n        })\n        : (await resolveCredentialSource(data.credential_source, profileName)(options))();\n    const params = {\n        RoleArn: data.role_arn,\n        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,\n        ExternalId: data.external_id,\n        DurationSeconds: parseInt(data.duration_seconds || \"3600\", 10),\n    };\n    const { mfa_serial } = data;\n    if (mfa_serial) {\n        if (!options.mfaCodeProvider) {\n            throw new CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, false);\n        }\n        params.SerialNumber = mfa_serial;\n        params.TokenCode = await options.mfaCodeProvider(mfa_serial);\n    }\n    const sourceCreds = await sourceCredsProvider;\n    return options.roleAssumer(sourceCreds, params);\n};\n","export const isProcessProfile = (arg) => Boolean(arg) && typeof arg === \"object\" && typeof arg.credential_process === \"string\";\nexport const resolveProcessCredentials = async (options, profile) => import(\"@aws-sdk/credential-provider-process\").then(({ fromProcess }) => fromProcess({\n    ...options,\n    profile,\n})());\n","export const resolveSsoCredentials = async (profile, options = {}) => {\n    const { fromSSO } = await import(\"@aws-sdk/credential-provider-sso\");\n    return fromSSO({\n        profile,\n        logger: options.logger,\n    })();\n};\nexport const isSsoProfile = (arg) => arg &&\n    (typeof arg.sso_start_url === \"string\" ||\n        typeof arg.sso_account_id === \"string\" ||\n        typeof arg.sso_session === \"string\" ||\n        typeof arg.sso_region === \"string\" ||\n        typeof arg.sso_role_name === \"string\");\n","export const isStaticCredsProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.aws_access_key_id === \"string\" &&\n    typeof arg.aws_secret_access_key === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.aws_session_token) > -1;\nexport const resolveStaticCredentials = (profile, options) => {\n    options?.logger?.debug(\"@aws-sdk/credential-provider-ini\", \"resolveStaticCredentials\");\n    return Promise.resolve({\n        accessKeyId: profile.aws_access_key_id,\n        secretAccessKey: profile.aws_secret_access_key,\n        sessionToken: profile.aws_session_token,\n        credentialScope: profile.aws_credential_scope,\n    });\n};\n","export const isWebIdentityProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.web_identity_token_file === \"string\" &&\n    typeof arg.role_arn === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1;\nexport const resolveWebIdentityCredentials = async (profile, options) => import(\"@aws-sdk/credential-provider-web-identity\").then(({ fromTokenFile }) => fromTokenFile({\n    webIdentityTokenFile: profile.web_identity_token_file,\n    roleArn: profile.role_arn,\n    roleSessionName: profile.role_session_name,\n    roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity,\n    logger: options.logger,\n    parentClientConfig: options.parentClientConfig,\n})());\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { isAssumeRoleProfile, resolveAssumeRoleCredentials } from \"./resolveAssumeRoleCredentials\";\nimport { isProcessProfile, resolveProcessCredentials } from \"./resolveProcessCredentials\";\nimport { isSsoProfile, resolveSsoCredentials } from \"./resolveSsoCredentials\";\nimport { isStaticCredsProfile, resolveStaticCredentials } from \"./resolveStaticCredentials\";\nimport { isWebIdentityProfile, resolveWebIdentityCredentials } from \"./resolveWebIdentityCredentials\";\nexport const resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}) => {\n    const data = profiles[profileName];\n    if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data, options);\n    }\n    if (isAssumeRoleProfile(data)) {\n        return resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);\n    }\n    if (isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data, options);\n    }\n    if (isWebIdentityProfile(data)) {\n        return resolveWebIdentityCredentials(data, options);\n    }\n    if (isProcessProfile(data)) {\n        return resolveProcessCredentials(options, profileName);\n    }\n    if (isSsoProfile(data)) {\n        return await resolveSsoCredentials(profileName, options);\n    }\n    throw new CredentialsProviderError(`Profile ${profileName} could not be found or parsed in shared credentials file.`);\n};\n","import { getProfileName, parseKnownFiles } from \"@smithy/shared-ini-file-loader\";\nimport { resolveProfileData } from \"./resolveProfileData\";\nexport const fromIni = (init = {}) => async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-ini\", \"fromIni\");\n    const profiles = await parseKnownFiles(init);\n    return resolveProfileData(getProfileName(init), profiles, init);\n};\n"],"names":["resolveCredentialSource","credentialSource","profileName","sourceProvidersMap","options","fromContainerMetadata","fromInstanceMetadata","fromEnv","isAssumeRoleProfile","arg","isAssumeRoleWithSourceProfile","isAssumeRoleWithProviderProfile","resolveAssumeRoleCredentials","profiles","visitedProfiles","data","getDefaultRoleAssumer","source_profile","sourceCredsProvider","resolveProfileData","params","mfa_serial","sourceCreds","isProcessProfile","resolveProcessCredentials","profile","fromProcess","resolveSsoCredentials","fromSSO","isSsoProfile","isStaticCredsProfile","resolveStaticCredentials","isWebIdentityProfile","resolveWebIdentityCredentials","fromTokenFile","fromIni","init"],"sourceRoot":""}