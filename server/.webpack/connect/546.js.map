{"version":3,"file":"546.js","mappings":"6HAAO,MAAMA,EAAgBC,GAAQA,IAChC,OAAOA,EAAI,eAAkB,UAC1B,OAAOA,EAAI,gBAAmB,UAC9B,OAAOA,EAAI,aAAgB,UAC3B,OAAOA,EAAI,YAAe,UAC1B,OAAOA,EAAI,eAAkB,UCLxBC,EAAmB,EAAI,GAAK,IAC5BC,EAAkB,kFCDzBC,EAAqB,CAAC,EACfC,EAAmB,MAAOC,GAAc,CACjD,KAAM,CAAE,cAAAC,CAAc,EAAI,MAAM,8BAChC,GAAIH,EAAmBE,CAAS,EAC5B,OAAOF,EAAmBE,CAAS,EAEvC,MAAME,EAAgB,IAAID,EAAc,CAAE,OAAQD,CAAU,CAAC,EAC7D,OAAAF,EAAmBE,CAAS,EAAIE,EACzBA,CACX,ECRaC,EAAqB,MAAOC,EAAUJ,IAAc,CAC7D,KAAM,CAAE,mBAAAK,CAAmB,EAAI,MAAM,8BAErC,OADsB,MAAMN,EAAiBC,CAAS,GACjC,KAAK,IAAIK,EAAmB,CAC7C,SAAUD,EAAS,SACnB,aAAcA,EAAS,aACvB,aAAcA,EAAS,aACvB,UAAW,eACf,CAAC,CAAC,CACN,ECRaE,EAAuBC,GAAU,CAC1C,GAAIA,EAAM,YAAcA,EAAM,WAAW,QAAQ,EAAI,KAAK,IAAI,EAC1D,MAAM,IAAI,KAAmB,qBAAqBV,IAAmB,EAAK,CAElF,ECJaW,EAAmB,CAACC,EAAKC,EAAOC,EAAa,KAAU,CAChE,GAAI,OAAOD,EAAU,IACjB,MAAM,IAAI,KAAmB,0BAA0BD,kBAAoBE,EAAa,mBAAqB,OAAOd,IAAmB,EAAK,CAEpJ,E,cCJA,KAAM,CAAE,UAAAe,CAAU,EAAI,WACTC,EAAsB,CAACC,EAAIV,IAAa,CACjD,MAAMW,KAAgB,MAAoBD,CAAE,EACtCE,EAAc,KAAK,UAAUZ,EAAU,KAAM,CAAC,EACpD,OAAOQ,EAAUG,EAAeC,CAAW,CAC/C,ECAMC,EAAyB,IAAI,KAAK,CAAC,EAC5BC,EAAU,CAACC,EAAO,CAAC,IAAM,SAAY,CAC9CA,EAAK,QAAQ,MAAM,2BAA4B,SAAS,EACxD,MAAMC,EAAW,QAAM,MAAgBD,CAAI,EACrCE,KAAc,MAAeF,CAAI,EACjCG,EAAUF,EAASC,CAAW,EACpC,GAAKC,GAGA,GAAI,CAACA,EAAQ,YACd,MAAM,IAAI,KAAmB,YAAYD,gDAA0D,MAHnG,OAAM,IAAI,KAAmB,YAAYA,oDAA+D,EAAK,EAKjH,MAAME,EAAiBD,EAAQ,YAEzBE,GADc,QAAM,MAAmBL,CAAI,GAClBI,CAAc,EAC7C,GAAI,CAACC,EACD,MAAM,IAAI,KAAmB,gBAAgBD,oDAAkE,EAAK,EAExH,UAAWE,IAAyB,CAAC,gBAAiB,YAAY,EAC9D,GAAI,CAACD,EAAWC,CAAqB,EACjC,MAAM,IAAI,KAAmB,gBAAgBF,oCAAiDE,MAA2B,EAAK,EAGtI,MAAMC,EAAcF,EAAW,cACzBxB,EAAYwB,EAAW,WAC7B,IAAIpB,EACJ,GAAI,CACAA,EAAW,QAAM,MAAoBmB,CAAc,CACvD,MACA,CACI,MAAM,IAAI,KAAmB,iDAAiDF,kCAA4CxB,IAAmB,EAAK,CACtJ,CACAW,EAAiB,cAAeJ,EAAS,WAAW,EACpDI,EAAiB,YAAaJ,EAAS,SAAS,EAChD,KAAM,CAAE,YAAAuB,EAAa,UAAAC,CAAU,EAAIxB,EAC7ByB,EAAgB,CAAE,MAAOF,EAAa,WAAY,IAAI,KAAKC,CAAS,CAAE,EAC5E,GAAIC,EAAc,WAAW,QAAQ,EAAI,KAAK,IAAI,EAAIjC,EAClD,OAAOiC,EAEX,GAAI,KAAK,IAAI,EAAIZ,EAAuB,QAAQ,EAAI,GAAK,IACrD,OAAAX,EAAoBuB,CAAa,EAC1BA,EAEXrB,EAAiB,WAAYJ,EAAS,SAAU,EAAI,EACpDI,EAAiB,eAAgBJ,EAAS,aAAc,EAAI,EAC5DI,EAAiB,eAAgBJ,EAAS,aAAc,EAAI,EAC5D,GAAI,CACAa,EAAuB,QAAQ,KAAK,IAAI,CAAC,EACzC,MAAMa,EAAkB,MAAM3B,EAAmBC,EAAUJ,CAAS,EACpEQ,EAAiB,cAAesB,EAAgB,WAAW,EAC3DtB,EAAiB,YAAasB,EAAgB,SAAS,EACvD,MAAMC,EAAqB,IAAI,KAAK,KAAK,IAAI,EAAID,EAAgB,UAAY,GAAI,EACjF,GAAI,CACA,MAAMjB,EAAoBU,EAAgB,CACtC,GAAGnB,EACH,YAAa0B,EAAgB,YAC7B,UAAWC,EAAmB,YAAY,EAC1C,aAAcD,EAAgB,YAClC,CAAC,CACL,MACA,CACA,CACA,MAAO,CACH,MAAOA,EAAgB,YACvB,WAAYC,CAChB,CACJ,MACA,CACI,OAAAzB,EAAoBuB,CAAa,EAC1BA,CACX,CACJ,EC3EMG,EAA+B,GACxBC,EAAwB,MAAO,CAAE,YAAAP,EAAa,WAAAF,EAAY,aAAAU,EAAc,UAAAlC,EAAW,YAAAmC,EAAa,UAAAC,EAAW,aAAAC,EAAc,QAAAf,CAAS,IAAM,CACjJ,IAAIf,EACJ,MAAM+B,EAAiB,gFACvB,GAAId,EACA,GAAI,CACA,MAAMe,EAAS,MAAM,EAAoB,CAAE,QAAAjB,CAAQ,CAAC,EAAE,EACtDf,EAAQ,CACJ,YAAagC,EAAO,MACpB,UAAW,IAAI,KAAKA,EAAO,UAAU,EAAE,YAAY,CACvD,CACJ,OACOC,EAAP,CACI,MAAM,IAAI,KAAyBA,EAAE,QAASR,CAA4B,CAC9E,KAGA,IAAI,CACAzB,EAAQ,QAAM,MAAoBmB,CAAW,CACjD,MACA,CACI,MAAM,IAAI,KAAyB,4DAA4DY,IAAkBN,CAA4B,CACjJ,CAEJ,GAAI,IAAI,KAAKzB,EAAM,SAAS,EAAE,QAAQ,EAAI,KAAK,IAAI,GAAK,EACpD,MAAM,IAAI,KAAyB,6DAA6D+B,IAAkBN,CAA4B,EAElJ,KAAM,CAAE,YAAAL,CAAY,EAAIpB,EAClB,CAAE,UAAAkC,EAAW,0BAAAC,CAA0B,EAAI,MAAM,8BACjDC,EAAMP,GACR,IAAIK,EAAU,OAAO,OAAO,CAAC,EAAGJ,GAAgB,CAAC,EAAG,CAChD,OAAQA,GAAc,QAAUrC,CACpC,CAAC,CAAC,EACN,IAAI4C,EACJ,GAAI,CACAA,EAAU,MAAMD,EAAI,KAAK,IAAID,EAA0B,CACnD,UAAWR,EACX,SAAUC,EACV,YAAAR,CACJ,CAAC,CAAC,CACN,OACOa,EAAP,CACI,MAAM,KAAyB,KAAKA,EAAGR,CAA4B,CACvE,CACA,KAAM,CAAE,gBAAiB,CAAE,YAAAa,EAAa,gBAAAC,EAAiB,aAAAC,EAAc,WAAAC,EAAY,gBAAAC,CAAgB,EAAI,CAAC,CAAE,EAAIL,EAC9G,GAAI,CAACC,GAAe,CAACC,GAAmB,CAACC,GAAgB,CAACC,EACtD,MAAM,IAAI,KAAyB,+CAAgDhB,CAA4B,EAEnH,MAAO,CAAE,YAAAa,EAAa,gBAAAC,EAAiB,aAAAC,EAAc,WAAY,IAAI,KAAKC,CAAU,EAAG,gBAAAC,CAAgB,CAC3G,ECnDaC,EAAsB5B,GAAY,CAC3C,KAAM,CAAE,cAAA6B,EAAe,eAAAC,EAAgB,WAAAC,EAAY,cAAAC,CAAc,EAAIhC,EACrE,GAAI,CAAC6B,GAAiB,CAACC,GAAkB,CAACC,GAAc,CAACC,EACrD,MAAM,IAAI,KAAyB,iJACwB,OAAO,KAAKhC,CAAO,EAAE,KAAK,IAAI;AAAA,oFAAyF,EAAK,EAE3L,OAAOA,CACX,ECHaiC,EAAU,CAACpC,EAAO,CAAC,IAAM,SAAY,CAC9CA,EAAK,QAAQ,MAAM,mCAAoC,SAAS,EAChE,KAAM,CAAE,YAAAO,EAAa,aAAAQ,EAAc,UAAAlC,EAAW,YAAAmC,EAAa,WAAAX,CAAW,EAAIL,EACpE,CAAE,UAAAiB,CAAU,EAAIjB,EAChBE,KAAc,MAAeF,CAAI,EACvC,GAAI,CAACO,GAAe,CAACQ,GAAgB,CAAClC,GAAa,CAACmC,GAAe,CAACX,EAAY,CAE5E,MAAMF,GADW,QAAM,MAAgBH,CAAI,GAClBE,CAAW,EACpC,GAAI,CAACC,EACD,MAAM,IAAI,KAAyB,WAAWD,kBAA4B,EAE9E,GAAI,CAAC3B,EAAa4B,CAAO,EACrB,MAAM,IAAI,KAAyB,WAAWD,2CAAqD,EAEvG,GAAIC,GAAS,YAAa,CAEtB,MAAMkC,GADc,QAAM,MAAmBrC,CAAI,GACrBG,EAAQ,WAAW,EACzCmC,EAAc,8BAA8BpC,qBAA+BC,EAAQ,cACzF,GAAItB,GAAaA,IAAcwD,EAAQ,WACnC,MAAM,IAAI,KAAyB,yBAA2BC,EAAa,EAAK,EAEpF,GAAI/B,GAAeA,IAAgB8B,EAAQ,cACvC,MAAM,IAAI,KAAyB,4BAA8BC,EAAa,EAAK,EAEvFnC,EAAQ,WAAakC,EAAQ,WAC7BlC,EAAQ,cAAgBkC,EAAQ,aACpC,CACA,KAAM,CAAE,cAAAL,EAAe,eAAAC,EAAgB,WAAAC,EAAY,cAAAC,EAAe,YAAAI,CAAY,EAAIR,EAAmB5B,CAAO,EAC5G,OAAOW,EAAsB,CACzB,YAAakB,EACb,WAAYO,EACZ,aAAcN,EACd,UAAWC,EACX,YAAaC,EACb,UAAWlB,EACX,aAAcjB,EAAK,aACnB,QAASE,CACb,CAAC,CACL,KACK,IAAI,CAACK,GAAe,CAACQ,GAAgB,CAAClC,GAAa,CAACmC,EACrD,MAAM,IAAI,KAAyB,8HAC4B,EAG/D,OAAOF,EAAsB,CACzB,YAAAP,EACA,WAAAF,EACA,aAAAU,EACA,UAAAlC,EACA,YAAAmC,EACA,UAAAC,EACA,aAAcjB,EAAK,aACnB,QAASE,CACb,CAAC,EAET,C","sources":["webpack:///../../@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-sso/dist-es/isSsoProfile.js","webpack:///../../@aws-sdk/client-dynamodb/node_modules/@aws-sdk/token-providers/dist-es/constants.js","webpack:///../../@aws-sdk/client-dynamodb/node_modules/@aws-sdk/token-providers/dist-es/getSsoOidcClient.js","webpack:///../../@aws-sdk/client-dynamodb/node_modules/@aws-sdk/token-providers/dist-es/getNewSsoOidcToken.js","webpack:///../../@aws-sdk/client-dynamodb/node_modules/@aws-sdk/token-providers/dist-es/validateTokenExpiry.js","webpack:///../../@aws-sdk/client-dynamodb/node_modules/@aws-sdk/token-providers/dist-es/validateTokenKey.js","webpack:///../../@aws-sdk/client-dynamodb/node_modules/@aws-sdk/token-providers/dist-es/writeSSOTokenToFile.js","webpack:///../../@aws-sdk/client-dynamodb/node_modules/@aws-sdk/token-providers/dist-es/fromSso.js","webpack:///../../@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-sso/dist-es/resolveSSOCredentials.js","webpack:///../../@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-sso/dist-es/validateSsoProfile.js","webpack:///../../@aws-sdk/client-dynamodb/node_modules/@aws-sdk/credential-provider-sso/dist-es/fromSSO.js"],"sourcesContent":["export const isSsoProfile = (arg) => arg &&\n    (typeof arg.sso_start_url === \"string\" ||\n        typeof arg.sso_account_id === \"string\" ||\n        typeof arg.sso_session === \"string\" ||\n        typeof arg.sso_region === \"string\" ||\n        typeof arg.sso_role_name === \"string\");\n","export const EXPIRE_WINDOW_MS = 5 * 60 * 1000;\nexport const REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;\n","const ssoOidcClientsHash = {};\nexport const getSsoOidcClient = async (ssoRegion) => {\n    const { SSOOIDCClient } = await import(\"./loadSsoOidc\");\n    if (ssoOidcClientsHash[ssoRegion]) {\n        return ssoOidcClientsHash[ssoRegion];\n    }\n    const ssoOidcClient = new SSOOIDCClient({ region: ssoRegion });\n    ssoOidcClientsHash[ssoRegion] = ssoOidcClient;\n    return ssoOidcClient;\n};\n","import { getSsoOidcClient } from \"./getSsoOidcClient\";\nexport const getNewSsoOidcToken = async (ssoToken, ssoRegion) => {\n    const { CreateTokenCommand } = await import(\"./loadSsoOidc\");\n    const ssoOidcClient = await getSsoOidcClient(ssoRegion);\n    return ssoOidcClient.send(new CreateTokenCommand({\n        clientId: ssoToken.clientId,\n        clientSecret: ssoToken.clientSecret,\n        refreshToken: ssoToken.refreshToken,\n        grantType: \"refresh_token\",\n    }));\n};\n","import { TokenProviderError } from \"@smithy/property-provider\";\nimport { REFRESH_MESSAGE } from \"./constants\";\nexport const validateTokenExpiry = (token) => {\n    if (token.expiration && token.expiration.getTime() < Date.now()) {\n        throw new TokenProviderError(`Token is expired. ${REFRESH_MESSAGE}`, false);\n    }\n};\n","import { TokenProviderError } from \"@smithy/property-provider\";\nimport { REFRESH_MESSAGE } from \"./constants\";\nexport const validateTokenKey = (key, value, forRefresh = false) => {\n    if (typeof value === \"undefined\") {\n        throw new TokenProviderError(`Value not present for '${key}' in SSO Token${forRefresh ? \". Cannot refresh\" : \"\"}. ${REFRESH_MESSAGE}`, false);\n    }\n};\n","import { getSSOTokenFilepath } from \"@smithy/shared-ini-file-loader\";\nimport { promises as fsPromises } from \"fs\";\nconst { writeFile } = fsPromises;\nexport const writeSSOTokenToFile = (id, ssoToken) => {\n    const tokenFilepath = getSSOTokenFilepath(id);\n    const tokenString = JSON.stringify(ssoToken, null, 2);\n    return writeFile(tokenFilepath, tokenString);\n};\n","import { TokenProviderError } from \"@smithy/property-provider\";\nimport { getProfileName, getSSOTokenFromFile, loadSsoSessionData, parseKnownFiles, } from \"@smithy/shared-ini-file-loader\";\nimport { EXPIRE_WINDOW_MS, REFRESH_MESSAGE } from \"./constants\";\nimport { getNewSsoOidcToken } from \"./getNewSsoOidcToken\";\nimport { validateTokenExpiry } from \"./validateTokenExpiry\";\nimport { validateTokenKey } from \"./validateTokenKey\";\nimport { writeSSOTokenToFile } from \"./writeSSOTokenToFile\";\nconst lastRefreshAttemptTime = new Date(0);\nexport const fromSso = (init = {}) => async () => {\n    init.logger?.debug(\"@aws-sdk/token-providers\", \"fromSso\");\n    const profiles = await parseKnownFiles(init);\n    const profileName = getProfileName(init);\n    const profile = profiles[profileName];\n    if (!profile) {\n        throw new TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);\n    }\n    else if (!profile[\"sso_session\"]) {\n        throw new TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);\n    }\n    const ssoSessionName = profile[\"sso_session\"];\n    const ssoSessions = await loadSsoSessionData(init);\n    const ssoSession = ssoSessions[ssoSessionName];\n    if (!ssoSession) {\n        throw new TokenProviderError(`Sso session '${ssoSessionName}' could not be found in shared credentials file.`, false);\n    }\n    for (const ssoSessionRequiredKey of [\"sso_start_url\", \"sso_region\"]) {\n        if (!ssoSession[ssoSessionRequiredKey]) {\n            throw new TokenProviderError(`Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`, false);\n        }\n    }\n    const ssoStartUrl = ssoSession[\"sso_start_url\"];\n    const ssoRegion = ssoSession[\"sso_region\"];\n    let ssoToken;\n    try {\n        ssoToken = await getSSOTokenFromFile(ssoSessionName);\n    }\n    catch (e) {\n        throw new TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${REFRESH_MESSAGE}`, false);\n    }\n    validateTokenKey(\"accessToken\", ssoToken.accessToken);\n    validateTokenKey(\"expiresAt\", ssoToken.expiresAt);\n    const { accessToken, expiresAt } = ssoToken;\n    const existingToken = { token: accessToken, expiration: new Date(expiresAt) };\n    if (existingToken.expiration.getTime() - Date.now() > EXPIRE_WINDOW_MS) {\n        return existingToken;\n    }\n    if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1000) {\n        validateTokenExpiry(existingToken);\n        return existingToken;\n    }\n    validateTokenKey(\"clientId\", ssoToken.clientId, true);\n    validateTokenKey(\"clientSecret\", ssoToken.clientSecret, true);\n    validateTokenKey(\"refreshToken\", ssoToken.refreshToken, true);\n    try {\n        lastRefreshAttemptTime.setTime(Date.now());\n        const newSsoOidcToken = await getNewSsoOidcToken(ssoToken, ssoRegion);\n        validateTokenKey(\"accessToken\", newSsoOidcToken.accessToken);\n        validateTokenKey(\"expiresIn\", newSsoOidcToken.expiresIn);\n        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1000);\n        try {\n            await writeSSOTokenToFile(ssoSessionName, {\n                ...ssoToken,\n                accessToken: newSsoOidcToken.accessToken,\n                expiresAt: newTokenExpiration.toISOString(),\n                refreshToken: newSsoOidcToken.refreshToken,\n            });\n        }\n        catch (error) {\n        }\n        return {\n            token: newSsoOidcToken.accessToken,\n            expiration: newTokenExpiration,\n        };\n    }\n    catch (error) {\n        validateTokenExpiry(existingToken);\n        return existingToken;\n    }\n};\n","import { fromSso as getSsoTokenProvider } from \"@aws-sdk/token-providers\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { getSSOTokenFromFile } from \"@smithy/shared-ini-file-loader\";\nconst SHOULD_FAIL_CREDENTIAL_CHAIN = false;\nexport const resolveSSOCredentials = async ({ ssoStartUrl, ssoSession, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, clientConfig, profile, }) => {\n    let token;\n    const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;\n    if (ssoSession) {\n        try {\n            const _token = await getSsoTokenProvider({ profile })();\n            token = {\n                accessToken: _token.token,\n                expiresAt: new Date(_token.expiration).toISOString(),\n            };\n        }\n        catch (e) {\n            throw new CredentialsProviderError(e.message, SHOULD_FAIL_CREDENTIAL_CHAIN);\n        }\n    }\n    else {\n        try {\n            token = await getSSOTokenFromFile(ssoStartUrl);\n        }\n        catch (e) {\n            throw new CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);\n        }\n    }\n    if (new Date(token.expiresAt).getTime() - Date.now() <= 0) {\n        throw new CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);\n    }\n    const { accessToken } = token;\n    const { SSOClient, GetRoleCredentialsCommand } = await import(\"./loadSso\");\n    const sso = ssoClient ||\n        new SSOClient(Object.assign({}, clientConfig ?? {}, {\n            region: clientConfig?.region ?? ssoRegion,\n        }));\n    let ssoResp;\n    try {\n        ssoResp = await sso.send(new GetRoleCredentialsCommand({\n            accountId: ssoAccountId,\n            roleName: ssoRoleName,\n            accessToken,\n        }));\n    }\n    catch (e) {\n        throw CredentialsProviderError.from(e, SHOULD_FAIL_CREDENTIAL_CHAIN);\n    }\n    const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration, credentialScope } = {} } = ssoResp;\n    if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {\n        throw new CredentialsProviderError(\"SSO returns an invalid temporary credential.\", SHOULD_FAIL_CREDENTIAL_CHAIN);\n    }\n    return { accessKeyId, secretAccessKey, sessionToken, expiration: new Date(expiration), credentialScope };\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nexport const validateSsoProfile = (profile) => {\n    const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;\n    if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {\n        throw new CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters \"sso_account_id\", ` +\n            `\"sso_region\", \"sso_role_name\", \"sso_start_url\". Got ${Object.keys(profile).join(\", \")}\\nReference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, false);\n    }\n    return profile;\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { getProfileName, loadSsoSessionData, parseKnownFiles } from \"@smithy/shared-ini-file-loader\";\nimport { isSsoProfile } from \"./isSsoProfile\";\nimport { resolveSSOCredentials } from \"./resolveSSOCredentials\";\nimport { validateSsoProfile } from \"./validateSsoProfile\";\nexport const fromSSO = (init = {}) => async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-sso\", \"fromSSO\");\n    const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;\n    const { ssoClient } = init;\n    const profileName = getProfileName(init);\n    if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {\n        const profiles = await parseKnownFiles(init);\n        const profile = profiles[profileName];\n        if (!profile) {\n            throw new CredentialsProviderError(`Profile ${profileName} was not found.`);\n        }\n        if (!isSsoProfile(profile)) {\n            throw new CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`);\n        }\n        if (profile?.sso_session) {\n            const ssoSessions = await loadSsoSessionData(init);\n            const session = ssoSessions[profile.sso_session];\n            const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;\n            if (ssoRegion && ssoRegion !== session.sso_region) {\n                throw new CredentialsProviderError(`Conflicting SSO region` + conflictMsg, false);\n            }\n            if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {\n                throw new CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, false);\n            }\n            profile.sso_region = session.sso_region;\n            profile.sso_start_url = session.sso_start_url;\n        }\n        const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = validateSsoProfile(profile);\n        return resolveSSOCredentials({\n            ssoStartUrl: sso_start_url,\n            ssoSession: sso_session,\n            ssoAccountId: sso_account_id,\n            ssoRegion: sso_region,\n            ssoRoleName: sso_role_name,\n            ssoClient: ssoClient,\n            clientConfig: init.clientConfig,\n            profile: profileName,\n        });\n    }\n    else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {\n        throw new CredentialsProviderError(\"Incomplete configuration. The fromSSO() argument hash must include \" +\n            '\"ssoStartUrl\", \"ssoAccountId\", \"ssoRegion\", \"ssoRoleName\"');\n    }\n    else {\n        return resolveSSOCredentials({\n            ssoStartUrl,\n            ssoSession,\n            ssoAccountId,\n            ssoRegion,\n            ssoRoleName,\n            ssoClient,\n            clientConfig: init.clientConfig,\n            profile: profileName,\n        });\n    }\n};\n"],"names":["isSsoProfile","arg","EXPIRE_WINDOW_MS","REFRESH_MESSAGE","ssoOidcClientsHash","getSsoOidcClient","ssoRegion","SSOOIDCClient","ssoOidcClient","getNewSsoOidcToken","ssoToken","CreateTokenCommand","validateTokenExpiry","token","validateTokenKey","key","value","forRefresh","writeFile","writeSSOTokenToFile","id","tokenFilepath","tokenString","lastRefreshAttemptTime","fromSso","init","profiles","profileName","profile","ssoSessionName","ssoSession","ssoSessionRequiredKey","ssoStartUrl","accessToken","expiresAt","existingToken","newSsoOidcToken","newTokenExpiration","SHOULD_FAIL_CREDENTIAL_CHAIN","resolveSSOCredentials","ssoAccountId","ssoRoleName","ssoClient","clientConfig","refreshMessage","_token","e","SSOClient","GetRoleCredentialsCommand","sso","ssoResp","accessKeyId","secretAccessKey","sessionToken","expiration","credentialScope","validateSsoProfile","sso_start_url","sso_account_id","sso_region","sso_role_name","fromSSO","session","conflictMsg","sso_session"],"sourceRoot":""}