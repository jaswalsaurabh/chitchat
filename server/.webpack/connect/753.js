"use strict";exports.id=753,exports.ids=[753],exports.modules={8753:(y,i,s)=>{s.r(i),s.d(i,{fromProcess:()=>x});var d=s(7652),o=s(6034),p=s(5317),u=s(9023);const f=(r,e)=>{if(e.Version!==1)throw Error(`Profile ${r} credential_process did not return Version 1.`);if(e.AccessKeyId===void 0||e.SecretAccessKey===void 0)throw Error(`Profile ${r} credential_process returned invalid credentials.`);if(e.Expiration){const n=new Date;if(new Date(e.Expiration)<n)throw Error(`Profile ${r} credential_process returned expired credentials.`)}return{accessKeyId:e.AccessKeyId,secretAccessKey:e.SecretAccessKey,...e.SessionToken&&{sessionToken:e.SessionToken},...e.Expiration&&{expiration:new Date(e.Expiration)},...e.CredentialScope&&{credentialScope:e.CredentialScope}}},a=async(r,e)=>{const n=e[r];if(e[r]){const t=n.credential_process;if(t!==void 0){const P=(0,u.promisify)(p.exec);try{const{stdout:c}=await P(t);let l;try{l=JSON.parse(c.trim())}catch{throw Error(`Profile ${r} credential_process returned invalid JSON.`)}return f(r,l)}catch(c){throw new o.C1(c.message)}}else throw new o.C1(`Profile ${r} did not contain credential_process.`)}else throw new o.C1(`Profile ${r} could not be found in shared credentials file.`)},x=(r={})=>async()=>{r.logger?.debug("@aws-sdk/credential-provider-process","fromProcess");const e=await(0,d.YU)(r);return a((0,d.Bz)(r),e)}}};

//# sourceMappingURL=753.js.map