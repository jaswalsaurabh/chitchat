"use strict";exports.id=334,exports.ids=[334],exports.modules={7334:(I,d,o)=>{o.r(d),o.d(d,{fromTokenFile:()=>E,fromWebToken:()=>l});var i=o(6034),c=o(9896);const l=e=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-web-identity","fromWebToken");const{roleArn:n,roleSessionName:s,webIdentityToken:t,providerId:N,policyArns:S,policy:f,durationSeconds:m}=e;let{roleAssumerWithWebIdentity:r}=e;if(!r){const{getDefaultRoleAssumerWithWebIdentity:A}=await Promise.all([o.e(888),o.e(245),o.e(746)]).then(o.bind(o,2746));r=A({...e.clientConfig,credentialProviderLogger:e.logger,parentClientConfig:e.parentClientConfig},e.clientPlugins)}return r({RoleArn:n,RoleSessionName:s??`aws-sdk-js-session-${Date.now()}`,WebIdentityToken:t,ProviderId:N,PolicyArns:S,Policy:f,DurationSeconds:m})},a="AWS_WEB_IDENTITY_TOKEN_FILE",g="AWS_ROLE_ARN",y="AWS_ROLE_SESSION_NAME",E=(e={})=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-web-identity","fromTokenFile");const n=e?.webIdentityTokenFile??process.env[a],s=e?.roleArn??process.env[g],t=e?.roleSessionName??process.env[y];if(!n||!s)throw new i.C1("Web identity configuration not specified");return l({...e,webIdentityToken:(0,c.readFileSync)(n,{encoding:"ascii"}),roleArn:s,roleSessionName:t})()}}};

//# sourceMappingURL=334.js.map