{"version":3,"file":"753.js","mappings":"4JAAO,MAAMA,EAAiC,CAACC,EAAaC,IAAS,CACjE,GAAIA,EAAK,UAAY,EACjB,MAAM,MAAM,WAAWD,gDAA0D,EAErF,GAAIC,EAAK,cAAgB,QAAaA,EAAK,kBAAoB,OAC3D,MAAM,MAAM,WAAWD,oDAA8D,EAEzF,GAAIC,EAAK,WAAY,CACjB,MAAMC,EAAc,IAAI,KAExB,GADmB,IAAI,KAAKD,EAAK,UAAU,EAC1BC,EACb,MAAM,MAAM,WAAWF,oDAA8D,CAE7F,CACA,MAAO,CACH,YAAaC,EAAK,YAClB,gBAAiBA,EAAK,gBACtB,GAAIA,EAAK,cAAgB,CAAE,aAAcA,EAAK,YAAa,EAC3D,GAAIA,EAAK,YAAc,CAAE,WAAY,IAAI,KAAKA,EAAK,UAAU,CAAE,EAC/D,GAAIA,EAAK,iBAAmB,CAAE,gBAAiBA,EAAK,eAAgB,CACxE,CACJ,ECjBaE,EAA4B,MAAOH,EAAaI,IAAa,CACtE,MAAMC,EAAUD,EAASJ,CAAW,EACpC,GAAII,EAASJ,CAAW,EAAG,CACvB,MAAMM,EAAoBD,EAAQ,mBAClC,GAAIC,IAAsB,OAAW,CACjC,MAAMC,KAAc,aAAU,MAAI,EAClC,GAAI,CACA,KAAM,CAAE,OAAAC,CAAO,EAAI,MAAMD,EAAYD,CAAiB,EACtD,IAAIL,EACJ,GAAI,CACAA,EAAO,KAAK,MAAMO,EAAO,KAAK,CAAC,CACnC,MACA,CACI,MAAM,MAAM,WAAWR,6CAAuD,CAClF,CACA,OAAOD,EAA+BC,EAAaC,CAAI,CAC3D,OACOQ,EAAP,CACI,MAAM,IAAI,KAAyBA,EAAM,OAAO,CACpD,CACJ,KAEI,OAAM,IAAI,KAAyB,WAAWT,uCAAiD,CAEvG,KAEI,OAAM,IAAI,KAAyB,WAAWA,kDAA4D,CAElH,EC9BaU,EAAc,CAACC,EAAO,CAAC,IAAM,SAAY,CAClDA,EAAK,QAAQ,MAAM,uCAAwC,aAAa,EACxE,MAAMP,EAAW,QAAM,MAAgBO,CAAI,EAC3C,OAAOR,KAA0B,MAAeQ,CAAI,EAAGP,CAAQ,CACnE,C","sources":["webpack:///../../@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/credential-provider-process/dist-es/getValidatedProcessCredentials.js","webpack:///../../@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/credential-provider-process/dist-es/resolveProcessCredentials.js","webpack:///../../@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/credential-provider-process/dist-es/fromProcess.js"],"sourcesContent":["export const getValidatedProcessCredentials = (profileName, data) => {\n    if (data.Version !== 1) {\n        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);\n    }\n    if (data.AccessKeyId === undefined || data.SecretAccessKey === undefined) {\n        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);\n    }\n    if (data.Expiration) {\n        const currentTime = new Date();\n        const expireTime = new Date(data.Expiration);\n        if (expireTime < currentTime) {\n            throw Error(`Profile ${profileName} credential_process returned expired credentials.`);\n        }\n    }\n    return {\n        accessKeyId: data.AccessKeyId,\n        secretAccessKey: data.SecretAccessKey,\n        ...(data.SessionToken && { sessionToken: data.SessionToken }),\n        ...(data.Expiration && { expiration: new Date(data.Expiration) }),\n        ...(data.CredentialScope && { credentialScope: data.CredentialScope }),\n    };\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { exec } from \"child_process\";\nimport { promisify } from \"util\";\nimport { getValidatedProcessCredentials } from \"./getValidatedProcessCredentials\";\nexport const resolveProcessCredentials = async (profileName, profiles) => {\n    const profile = profiles[profileName];\n    if (profiles[profileName]) {\n        const credentialProcess = profile[\"credential_process\"];\n        if (credentialProcess !== undefined) {\n            const execPromise = promisify(exec);\n            try {\n                const { stdout } = await execPromise(credentialProcess);\n                let data;\n                try {\n                    data = JSON.parse(stdout.trim());\n                }\n                catch {\n                    throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);\n                }\n                return getValidatedProcessCredentials(profileName, data);\n            }\n            catch (error) {\n                throw new CredentialsProviderError(error.message);\n            }\n        }\n        else {\n            throw new CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`);\n        }\n    }\n    else {\n        throw new CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`);\n    }\n};\n","import { getProfileName, parseKnownFiles } from \"@smithy/shared-ini-file-loader\";\nimport { resolveProcessCredentials } from \"./resolveProcessCredentials\";\nexport const fromProcess = (init = {}) => async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-process\", \"fromProcess\");\n    const profiles = await parseKnownFiles(init);\n    return resolveProcessCredentials(getProfileName(init), profiles);\n};\n"],"names":["getValidatedProcessCredentials","profileName","data","currentTime","resolveProcessCredentials","profiles","profile","credentialProcess","execPromise","stdout","error","fromProcess","init"],"sourceRoot":""}