{"version":3,"file":"687.js","mappings":"6JAAO,MAAMA,EAAgBC,GAAS,SAAY,CAC9CA,EAAK,QAAQ,MAAM,4CAA6C,cAAc,EAC9E,KAAM,CAAE,QAAAC,EAAS,gBAAAC,EAAiB,iBAAAC,EAAkB,WAAAC,EAAY,WAAAC,EAAY,OAAAC,EAAQ,gBAAAC,CAAgB,EAAIP,EACxG,GAAI,CAAE,2BAAAQ,CAA2B,EAAIR,EACrC,GAAI,CAACQ,EAA4B,CAC7B,KAAM,CAAE,qCAAAC,CAAqC,EAAI,MAAM,4DACvDD,EAA6BC,EAAqC,CAC9D,GAAGT,EAAK,aACR,yBAA0BA,EAAK,OAC/B,mBAAoBA,EAAK,kBAC7B,EAAGA,EAAK,aAAa,CACzB,CACA,OAAOQ,EAA2B,CAC9B,QAASP,EACT,gBAAiBC,GAAmB,sBAAsB,KAAK,IAAI,IACnE,iBAAkBC,EAClB,WAAYC,EACZ,WAAYC,EACZ,OAAQC,EACR,gBAAiBC,CACrB,CAAC,CACL,EClBMG,EAAiB,8BACjBC,EAAe,eACfC,EAAwB,wBACjBC,EAAgB,CAACb,EAAO,CAAC,IAAM,SAAY,CACpDA,EAAK,QAAQ,MAAM,4CAA6C,eAAe,EAC/E,MAAMc,EAAuBd,GAAM,sBAAwB,QAAQ,IAAIU,CAAc,EAC/ET,EAAUD,GAAM,SAAW,QAAQ,IAAIW,CAAY,EACnDT,EAAkBF,GAAM,iBAAmB,QAAQ,IAAIY,CAAqB,EAClF,GAAI,CAACE,GAAwB,CAACb,EAC1B,MAAM,IAAI,KAAyB,0CAA0C,EAEjF,OAAOF,EAAa,CAChB,GAAGC,EACH,oBAAkB,gBAAac,EAAsB,CAAE,SAAU,OAAQ,CAAC,EAC1E,QAAAb,EACA,gBAAAC,CACJ,CAAC,EAAE,CACP,C","sources":["webpack:///../../@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromWebToken.js","webpack:///../../@aws-sdk/client-apigatewaymanagementapi/node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromTokenFile.js"],"sourcesContent":["export const fromWebToken = (init) => async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-web-identity\", \"fromWebToken\");\n    const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds } = init;\n    let { roleAssumerWithWebIdentity } = init;\n    if (!roleAssumerWithWebIdentity) {\n        const { getDefaultRoleAssumerWithWebIdentity } = await import(\"./loadSts\");\n        roleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity({\n            ...init.clientConfig,\n            credentialProviderLogger: init.logger,\n            parentClientConfig: init.parentClientConfig,\n        }, init.clientPlugins);\n    }\n    return roleAssumerWithWebIdentity({\n        RoleArn: roleArn,\n        RoleSessionName: roleSessionName ?? `aws-sdk-js-session-${Date.now()}`,\n        WebIdentityToken: webIdentityToken,\n        ProviderId: providerId,\n        PolicyArns: policyArns,\n        Policy: policy,\n        DurationSeconds: durationSeconds,\n    });\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { readFileSync } from \"fs\";\nimport { fromWebToken } from \"./fromWebToken\";\nconst ENV_TOKEN_FILE = \"AWS_WEB_IDENTITY_TOKEN_FILE\";\nconst ENV_ROLE_ARN = \"AWS_ROLE_ARN\";\nconst ENV_ROLE_SESSION_NAME = \"AWS_ROLE_SESSION_NAME\";\nexport const fromTokenFile = (init = {}) => async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-web-identity\", \"fromTokenFile\");\n    const webIdentityTokenFile = init?.webIdentityTokenFile ?? process.env[ENV_TOKEN_FILE];\n    const roleArn = init?.roleArn ?? process.env[ENV_ROLE_ARN];\n    const roleSessionName = init?.roleSessionName ?? process.env[ENV_ROLE_SESSION_NAME];\n    if (!webIdentityTokenFile || !roleArn) {\n        throw new CredentialsProviderError(\"Web identity configuration not specified\");\n    }\n    return fromWebToken({\n        ...init,\n        webIdentityToken: readFileSync(webIdentityTokenFile, { encoding: \"ascii\" }),\n        roleArn,\n        roleSessionName,\n    })();\n};\n"],"names":["fromWebToken","init","roleArn","roleSessionName","webIdentityToken","providerId","policyArns","policy","durationSeconds","roleAssumerWithWebIdentity","getDefaultRoleAssumerWithWebIdentity","ENV_TOKEN_FILE","ENV_ROLE_ARN","ENV_ROLE_SESSION_NAME","fromTokenFile","webIdentityTokenFile"],"sourceRoot":""}